You are a Java expert and a Git expert, world class.

I will pass you 4 Java classes:

- SympleGit: a class that is the main point of entry, and allows to get GitCommander with SympleGit.getCommander()
- GitCommander: a class that allows to pass Git commands and get output and errors.
- GitWrapper: an interface for Git Wrapper classes 
- GitBranchExample: a simplified example of a wrapper class that does an only update and only a read Git operation.

These classes will be used as a guideline for building a new Wrapper class.
I want you to write following these guidelines a ${0} wrapped class that will have these methods:

${1} 

in order to wrap these Git operations: ${2}

The values of ${0}, ${1} ,and ${2} are at the end of this prompt.

Add a "@author GPT-4" at first Javadoc.
Please include clean & professional Javadoc in the generated class.

Please make sure to use Git commands with the options that do not use a pager or an editor.

Here are the 4 classes:

 * This file is part of SympleGit
 * SympleGit: Straightforward  Git in Java. Follows 
 *           'AI-Extensible Open Source Software' pattern
 * Copyright (C) 2024,  KawanSoft SAS
 * (http://www.kawansoft.com). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.symplegit.api;

import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

import com.symplegit.util.FrameworkDebug;

/**
 * SympleGit provides a fluent and simplified interface for configuring and
 * using Git operations. It utilizes a builder pattern for easy configuration
 * and initialization. It is a part of the SympleGit package, which aims to
 * simplify interactions with Git repositories. <br>
 * <br>
 * Usage:
 * <pre>
 * <code>
    String repoDirectoryPath = "/path/to/my/git/repository";
    final SympleGit sympleGit = SympleGit.custom()
        .setDirectory(repoDirectoryPath)
        .build();

    // From there:
    // 1) Call directly a Git Command

    GitCommander gitCommander = sympleGit.gitCommander();
    gitCommander.executeGitCommand("git", "add", "testFile1", "testFile2");

    // Or 2) call the Facilitator API with the build in classes
     
    GitAdd gitAdd = new GitAdd(sympleGit);
    gitAdd.add("testFile1", "testFile2");

    GitCommit gitCommit = new GitCommit(sympleGit);
    gitCommit.commitChanges("Modified test files");   
    
 * </code>
 * </pre>
 * @author KawanSoft SAS
 */
public class SympleGit implements AutoCloseable {

    /** Debug flag. */
    public static boolean DEBUG = FrameworkDebug.isSet(SympleGit.class);

    /** The default timeout for Git operations. */
    private static final int DEFAULT_TIMEOUT_SECONDS = 0;

    private final File directory;
    private int timeout;
    private TimeUnit unit;

    private List<File> tempFiles = new ArrayList<>();

    /**
     * Constructs a new instance of SympleGit with the specified configuration.
     *
     * @param builder The Builder object containing configuration settings.
     */
    private SympleGit(Builder builder) {
    this.directory = builder.directory;
    this.timeout = builder.timeout;
    this.unit = builder.unit;
    }

    /**
     * Creates a new Builder instance for configuring SympleGit.
     *
     * @return A new Builder instance.
     */
    public static Builder custom() {
    return new Builder();
    }

    /**
     * Gets the directory associated with this SympleGit instance.
     *
     * @return The directory as a File object.
     */
    public File getDirectory() {
    return directory;
    }

    /**
     * Gets the timeout setting for Git operations.
     *
     * @return The timeout in milliseconds.
     */
    public int getTimeout() {
    return timeout;
    }

    /**
     * Gets the timeout setting for Git operations.
     *
     * @return The timeout in milliseconds.
     * 
     */
    public TimeUnit getUnit() {
    return unit;
    }

    // Additional methods or functionality as needed

    /**
     * Builder class for SympleGit. Provides methods to configure SympleGit
     * instances.
     */
    public static class Builder {

    private File directory;
    private int timeout = DEFAULT_TIMEOUT_SECONDS;
    private TimeUnit unit = TimeUnit.SECONDS;

    /**
     * Sets the directory path for the Git repository.
     *
     * @param directoryPath The path to the Git repository directory.
     * @return The Builder instance for chaining.
     */
    public Builder setDirectory(String directoryPath) {
        Objects.requireNonNull(directoryPath, "directoryPath cannot be null");
        this.directory = new File(directoryPath);
        return this;
    }

    /**
     * Sets the directory path for the Git repository.
     *
     * @param directoryFile The File of the Git repository directory.
     * @return The Builder instance for chaining.
     */
    public Builder setDirectory(File directoryFile) {
        Objects.requireNonNull(directoryFile, "directoryFile cannot be null");
        this.directory = directoryFile;
        return this;
    }

    /**
     * Sets the timeout for Git operations.
     *
     * @param timeout the maximum time to wait
     * @param unit    the time unit of the timeout argument
     * @return The Builder instance for chaining.
     */
    public Builder setTimeout(int timeout, TimeUnit unit) {
        this.timeout = timeout;
        this.unit = unit;
        return this;
    }

    /**
     * Builds and returns a SympleGit instance with the current configuration.
     *
     * @return A configured SympleGit instance.
     */
    public SympleGit build() {
        return new SympleGit(this);
    }
    }

    /**
     * Creates a GitCommander instance based on the current SympleGit configuration.
     *
     * @return A new GitCommander instance.
     */
    public GitCommander gitCommander() {
    GitCommander gitCommander = new GitCommander(this);
    return gitCommander;
    }

    @Override
    public String toString() {
    return "SympleGit [directory=" + directory + ", timeout=" + timeout + ", unit=" + unit + "]";
    }

    /**
     * Adds a temporary error file or output to the list of temporary error files.
     * 
     * @param tempErrorFile the temp file containing the error message
     */
    void addTempFile(File tempFile) {
    tempFiles.add(tempFile);
    }

    /**
     * Deletes all temporary files. Should be done to to relieve java.io.tmpdir.
     */
    @Override
    public void close() throws Exception {
    if (tempFiles != null) {
        for (File tempFile : tempFiles) {
        tempFile.delete();
        }
    }
    }

    /**
     * Deletes all temporary files. <br>
     * To be used to clean java.io.tmpdir temp directory of SympleGit temp files, if
     * SympleGit was not systematically closed in applications. <br>
     * <br>
     * Be cautious when using this method (especially if JVM is shared )
     */
    public static void deleteTempFiles() {

    File tempDir = new File(System.getProperty("java.io.tmpdir"));

    FileFilter filter = new FileFilter() {

        @Override
        public boolean accept(File pathname) {
        if (pathname.toString().startsWith(tempDir + File.separator + GitCommander.SYMPLEGIT_OUTPUT)) {
            return true;
        }
        return false;
        }
    };

    final File[] tempfiles = tempDir.listFiles(filter);
    if (tempfiles != null) {
        for (File tempFile : tempfiles) {
        boolean deleted = tempFile.delete();
        debug("Deleting temporary file: " + deleted + ": " + tempFile.getAbsolutePath());
        }
    }
    }

    /**
     * Prints a debug message with the current timestamp if debugging is enabled.
     *
     * @param sMsg The debug message to be printed.
     */
    protected static void debug(String sMsg) {
    if (DEBUG) {
        System.out.println(new Date() + " " + sMsg);
    }
    }
}

 * This file is part of SympleGit
 * SympleGit: Straightforward  Git in Java. Follows 
 *           'AI-Extensible Open Source Software' pattern
 * Copyright (C) 2024,  KawanSoft SAS
 * (http://www.kawansoft.com). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.symplegit.api;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Date;
import java.util.Objects;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.apache.commons.io.IOUtils;

import com.symplegit.api.exception.UncheckedTimeoutException;
import com.symplegit.util.ApiDateUtil;
import com.symplegit.util.FrameworkDebug;

/**
 * The GitCommander class is responsible for executing Git commands and handling
 * their outputs. It uses a ProcessBuilder to run Git commands and captures
 * their output and error streams. <br>
 * Usage:
 * 
 * <pre>
 * <code>
    String repoDirectoryPath = "/path/to/my/git/repository";
    final SympleGit sympleGit = SympleGit.custom()
        .setDirectory(repoDirectoryPath)
        .build();

    String branchName = "myNewBranch";
    
    // Create gitCommander instance from SympleGit and create a branch
    GitCommander gitCommander = sympleGit.gitCommander();
    gitCommander.executeGitCommand("git", "branch", branchName);
    
    // Test all is OK:
    if (gitCommander.isResponseOk()) {
        System.out.println("Branch " + branchName + " successfully created!");
    }
    else {
        String error = gitCommander.getProcessError();
        System.out.println("Could not create branch: " +error);
    }
    
    // Example of output: Get the active branch name
    gitCommander.executeGitCommand("git", "branch", branchName);
    if (gitCommander.isResponseOk()) {
            System.out.println("Active Branch " + gitCommander.getProcessOutput());
        }
    }
 * </code>
 * </pre>
 *
 * @author KawanSoft SAS
 */
public class GitCommander {

    /** Debug flag. */
    public static boolean DEBUG = FrameworkDebug.isSet(GitCommander.class);

    static final String SYMPLEGIT_OUTPUT = "symplegit-output-";

    private SympleGit sympleGit;

    private ProcessBuilder builder;
    private Exception exception;
    private int exitCode;

    private File tempOutputFile = null;

    private Process process = null;

    /**
     * Constructs a GitCommander object with a specified SympleGit instance.
     *
     * @param sympleGit The SympleGit instance to be used for Git command execution.
     * @throws NullPointerException if sympleGit is null.
     */
    GitCommander(SympleGit sympleGit) {
    this.sympleGit = Objects.requireNonNull(sympleGit, "sympleGit cannot be null!");
    builder = new ProcessBuilder();
    builder.directory(sympleGit.getDirectory());
    }

    /**
     * Executes a Git command and handles its output and error streams.
     *
     * @param command The Git command to be executed, split into an array of
     *                strings.
     */
    public void executeGitCommand(String... command) {

    ExecutorService executor = Executors.newSingleThreadExecutor();

    Callable<String> task = new Callable<String>() {
        @Override
        public String call() throws InterruptedException {
        executeInThread(command);
        return "OK";
        }
    };

    Future<String> future = executor.submit(task);

    long timeout = sympleGit.getTimeout();
    TimeUnit unit = sympleGit.getUnit();

    debug("unit: " + unit);
    try {

        long futureTimeout = timeout == 0 ? Long.MAX_VALUE : timeout;

        // Get the result of the asynchronous computation with a timeout of 1 second
        future.get(futureTimeout, unit);
    } catch (TimeoutException e) {
        stopProcess();
        throw new UncheckedTimeoutException("Timeout after " + timeout + unit);
    } catch (InterruptedException | ExecutionException e) {
        e.printStackTrace();
    } finally {
        executor.shutdown(); // Always remember to shut down the executor service
    }
    }

    /**
     * @param command
     */
    private void executeInThread(String... command) {
    builder.redirectErrorStream(true);

    debug("Git command: " + removeCommas(Arrays.toString(command)));

    try {

        builder.command(command); // Correctly set the command
        process = builder.start();

        createOutputTempFile();
        debug("waitFor...: " + removeCommas(Arrays.toString(command)));

        exitCode = process.waitFor();
        debug("exitCode: " + exitCode);

        // process.destroy();
        process.destroyForcibly();

    } catch (Throwable throwable) {
        if (throwable instanceof Exception) {
        exception = (Exception) throwable;

        } else {
        exception = new Exception(throwable);
        }
    } finally {
        // sympleGit.addTempFile(tempErrorFile);
        sympleGit.addTempFile(tempOutputFile);
    }
    }

    /**
     * Create a temporary file to store the output of the last executed Git command.
     * 
     * @throws IOException
     * @throws FileNotFoundException
     */
    private void createOutputTempFile() throws IOException, FileNotFoundException {
    debug("Before tempOutputFile creation");

    tempOutputFile = File.createTempFile(SYMPLEGIT_OUTPUT + ApiDateUtil.getDateWithTime() + "-", ".txt");

    try (InputStream osInput = new BufferedInputStream(process.getInputStream());
        OutputStream osOutput = new BufferedOutputStream(new FileOutputStream(tempOutputFile))) {
        IOUtils.copy(osInput, osOutput);
    }

    debug("After tempOutputFile creation");

    // Optionally, delete the file when the JVM exits
    // tempOutputFile.deleteOnExit();
    }

    private void stopProcess() {
    if (this.process != null) {
        // this.process.destroy();
        this.process.destroyForcibly();
    }
    }

    /**
     * Checks if the last executed Git command was successful.
     *
     * @return true if the last Git command executed successfully (exit code 0),
     *         false otherwise.
     */
    public boolean isResponseOk() {
    return exitCode == 0;
    }

    /**
     * Retrieves the exit code of the last executed Git command.
     *
     * @return The exit code of the last Git command execution.
     */
    public int getExitCode() {
    return exitCode;
    }

    /**
     * Gets the standard output of the last executed Git command as a String. <br>
     * It's good practice to test the length of the output as it can be retrieved
     * with {@link #getSize()}.
     *
     * @return The standard output of the last executed Git command.
     * @throws IOException if an I/O error occurs while reading the output.
     */
    public String getProcessOutput() throws IOException {
    try (InputStream is = getProcessOutputAsInputStream()) {
        return IOUtils.toString(is, "UTF-8");
    }
    }

    /**
     * Gets the error output of the last executed Git command as a String.
     *
     * @return The error output of the last executed Git command.
     * @throws IOException if an I/O error occurs while reading the error output.
     */
    public String getProcessError() throws IOException {
    return getProcessOutput(); // Fusion of stream output and error output
    }

    /**
     * Gets the length of the standard output of the last executed Git command. This
     * will allow to decide if the content can be directly retrieved as a String.
     *
     * @return The length of the standard output of the last executed Git command.
     */
    public long getSize() {
    return tempOutputFile.length();
    }

    /**
     * Retrieves the standard output of the last executed Git command as an
     * InputStream.
     *
     * @return An InputStream of the standard output of the last executed Git
     *         command.
     * @throws IOException if the output file does not exist or an I/O error occurs.
     */
    public InputStream getProcessOutputAsInputStream() throws IOException {

    if (tempOutputFile != null && tempOutputFile.exists()) {
        return new BufferedInputStream(new FileInputStream(tempOutputFile));
    }
    return null;
    }

    /**
     * Retrieves the error output of the last executed Git command as an
     * InputStream.
     *
     * @return An InputStream of the error output of the last executed Git command.
     * @throws IOException if the error file does not exist or an I/O error occurs.
     */
    public InputStream getProcessErrorAsInputStream() throws IOException {
    return getProcessOutputAsInputStream(); // Fusion of stream output and error output
    }

    /**
     * Retrieves the exception that occurred during the last Git command execution,
     * if any.
     *
     * @return The exception thrown during the last Git command execution, or null
     *         if no exception occurred.
     */
    public Exception getException() {
    return exception;
    }

    /**
     * Removes commas from a given string.
     *
     * @param str The string from which commas should be removed.
     * @return The string without commas.
     */
    private String removeCommas(String str) {
    if (str != null && str.contains(",")) {
        str = str.replace(",", "");
    }
    return str;
    }

    /**
     * Prints a debug message with the current timestamp if debugging is enabled.
     *
     * @param sMsg The debug message to be printed.
     */
    protected void debug(String sMsg) {
    if (DEBUG) {
        System.out.println(new Date() + " " + sMsg);
    }
    }

}

 * This file is part of SympleGit
 * SympleGit: Straightforward  Git in Java. Follows 
 *           'AI-Extensible Open Source Software' pattern
 * Copyright (C) 2024,  KawanSoft SAS
 * (http://www.kawansoft.com). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.symplegit.api;
/**
 * The GitWrapper interface defines the essential functionalities that a wrapper
 * class for Git operations should implement. This interface ensures a
 * standardized way of handling responses and errors from Git commands.
 *
 * Implementing classes are expected to provide mechanisms to determine the
 * success of Git operations, retrieve error messages, and obtain any exceptions
 * that may have occurred.
 */
public interface GitWrapper {
    /**
     * Checks whether the last executed Git command completed successfully.
     *
     * @return true if the last Git command executed successfully (e.g., exit code
     *         0), false otherwise.
     */
    public boolean isResponseOk();
    /**
     * Retrieves the error message from the last executed Git command, if any.
     *
     * @return A String containing the error message from the last Git command
     *         execution. Returns null or an empty string if there was no error.
     */
    public String getError();
    /**
     * Gets the exception that was thrown during the last executed Git command, if
     * any.
     *
     * @return An Exception object representing the exception that occurred during
     *         the last Git command execution. Returns null if no exception was
     *         thrown.
     */
    public Exception getException();
}

 * This file is part of SympleGit
 * SympleGit: Straightforward  Git in Java. Follows 
 *           'AI-Extensible Open Source Software' pattern
 * Copyright (C) 2024,  KawanSoft SAS
 * (http://www.kawansoft.com). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.symplegit.api.facilitator;

import java.io.IOException;

import com.symplegit.api.GitCommander;
import com.symplegit.api.GitWrapper;
import com.symplegit.api.SympleGit;

/**
 * The GitBranchExample class provides functionalities to create a branch and get the active branch name.
 * It implements the GitWrapper interface and uses the GitCommander class to execute Git commands.
 */
public class GitBranchExample implements GitWrapper {

    private GitCommander gitCommander;
    private String errorMessage;
    private Exception exception;

    /**
     * Constructs a GitBranchModifier with a specified SympleGit instance.
     *
     * @param sympleGit The SympleGit instance to be used for Git command execution.
     */
    public GitBranchExample(SympleGit sympleGit) {
        this.gitCommander = sympleGit.gitCommander();
    }

    /**
     * Creates a new branch in the Git repository.
     *
     * @param branchName The name of the branch to be created.
     * @throws IOException If an error occurs during command execution.
     */
    public void createBranch(String branchName) throws IOException {
        executeGitCommandWithErrorHandler("git", "branch", branchName);
    }

    /**
     * Returns the active branch in the Git repository.
     * @return  the active branch in the Git repository.
     * @throws IOException If an error occurs during command execution.
     */
    public String getActiveBranch() throws IOException {
        executeGitCommandWithErrorHandler("git", "rev-parse", "--abbrev-ref", "HEAD");
        
        if (gitCommander.isResponseOk()) {
            String outputString = gitCommander.getProcessOutput();
            if (outputString == null || outputString.isEmpty()) {
                return null;
            }

            return outputString.trim();
        }
        return null;
    }
  
    /**
     * Executes a Git command and handles errors generically.
     *
     * @param command The Git command to be executed.
     * @throws IOException If an error occurs during command execution.
     */
    private void executeGitCommandWithErrorHandler(String... command) throws IOException {
        gitCommander.executeGitCommand(command);

        if (!gitCommander.isResponseOk()) {
            errorMessage = gitCommander.getProcessError();
            exception = gitCommander.getException();
        }
    }
    

    @Override
    public boolean isResponseOk() {
        return gitCommander.isResponseOk();
    }

    @Override
    public String getError() {
        return errorMessage;
    }

    @Override
    public Exception getException() {
        return exception;
    }
}


${0}=GitRepo
${1}=Methods: cloneRepository(repoUrl), initializeRepository(), getRepositoryStatus(), addRemote(name, url), removeRemote(name)
${2}=For repository-wide operations.
